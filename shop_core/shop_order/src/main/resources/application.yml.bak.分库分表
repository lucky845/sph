server:
  port: 8004

mybatis-plus:
  mapper-locations: classpath:com/atguigu/mapper/xml/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

feign:
  sentinel:
    enabled: true
  client:
    config:
      default:
        readTimeout: 3000
        connectTimeout: 1000

spring:
  application:
    name: shop-order

  cloud:
    nacos:
      discovery:
        server-addr: 120.79.10.205:8848

  rabbitmq:
    host: 120.79.10.205
    port: 5672
    username: admin
    password: 123
    listener:
      simple:
        acknowledge-mode: manual

  redis:
    host: 120.79.10.205
    port: 6389
    database: 0
    timeout: 1800000

  #  datasource:
  #    type: com.zaxxer.hikari.HikariDataSource
  #    driver-class-name: com.mysql.jdbc.Driver
  #    url: jdbc:mysql://120.79.10.205:3306/shop_order?characterEncoding=utf-8&useSSL=false
  #    username: root
  #    password: root

  # 分库分表
  shardingsphere:
    datasource:
      names: node-1,node-2,node-3
      node-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://120.79.10.205:3306/db_order_1?characterEncoding=utf-8&useSSL=false
        username: root
        password: root
      node-2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://120.79.10.205:3306/db_order_2?characterEncoding=utf-8&useSSL=false
        username: root
        password: root
      node-3:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://120.79.10.205:3306/db_order_3?characterEncoding=utf-8&useSSL=false
        username: root
        password: root
    rules:
      sharding:
        # 配制一个默认分库算法
        default-database-strategy:
          standard:
            sharding-column: user_id
            sharding-algorithm-name: sharding-db-by-user-id
        # 配制所有算法
        sharding-algorithms:
          # 数据库的分库算法
          sharding-db-by-user-id:
            type: INLINE
            props: # node-1,node-2,node-3
              algorithm-expression: node-$->{user_id%3+1}
          # 表的分表算法
          sharding-table-order-by-user-id:
            type: INLINE
            props: # t_order_1 t_order_2 t_order_3 t_order_4
              algorithm-expression: t_order_$->{user_id%4+1}
          sharding-table-order-detail-by-user-id:
            type: INLINE
            props: # t_order_detail_1 t_order_detail_2 t_order_detail_3 t_order_detail_4
              algorithm-expression: t_order_detail_$->{user_id%4+1}
        # 配制分表使用的算法
        tables:
          t_order:
            # 真实数据节点
            actual-data-nodes: node-$->{1..3}.t_order_$->{1..4}
            # 表策略
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: sharding-table-order-by-user-id
          t_order_detail:
            actual-data-nodes: node-$->{1..3}.t_order_detail_$->{1..4}
            # 表策略
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: sharding-table-order-detail-by-user-id
        # 配制绑定表
        binding-tables:
          - t_order,t_order_detail
    props:
      # 打印SQl语句到控制台
      sql-show: true

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

cancel:
  order:
    delay: 30000
